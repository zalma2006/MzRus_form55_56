import pandas as pd
import re
import numpy as np


# поиск 1 таблицы (сведения о центре МК)
def find_df1(df):
    a = []
    b = 0
    for x, y in enumerate(df['1']):
        if type(y) == str and y.lower().startswith('наименование') and \
                (str(df.loc[x, '2']).startswith('Отметка (нет') or
                 str(df.loc[x, '3']).startswith('Отметка (нет') or
                 str(df.loc[x, '4']).startswith('Отметка (нет')):
            a.append(x)
            b += 1
        if type(y) == str and y.lower().startswith('прочий'):
            a.append(x + 1)
            b += 1
        if b >= 2:
            break
    df1 = df[a[0]: a[-1]].copy()
    df1.dropna(how='all', axis=1, inplace=True)
    df1.reset_index(drop=True, inplace=True)
    df1.drop(index=[0], inplace=True)
    df1.rename(columns={
        df1.columns[0]: 'наименование',
        df1.columns[1]: 'отметка'}, inplace=True)
    df1.reset_index(drop=True, inplace=True)
    df1.loc[df1['отметка'].isna(), 'отметка'] = 0
    df1.loc[df1['отметка'].isin(['1', 1]), 'отметка'] = 1
    df1['отметка'] = df1['отметка'].astype(int)
    for x, y in enumerate(df1.columns):
        if y not in ['наименование', 'наименование_субъекта']:
            df1[y] = df1[y].astype(str)
            df1[y] = df1[y].str.replace(',', '.')
            df1[y] = df1[y].astype(float)
    df1.at[0, 'наименование'] = '01_статус_самостоятельный_центр'
    df1.at[1, 'наименование'] = '02_филиал_центра_МК'
    df1.at[2, 'наименование'] = '03_центр_МК_на_базе_МО'
    df1.at[3, 'наименование'] = '04_центр_МК_на_базе_ОКРО_МО'
    df1.at[4, 'наименование'] = '05_центр_МК_на_базе_городской_МО'
    df1.at[5, 'наименование'] = '06_центр_МК_на_базе_городской_сМП'
    df1.at[6, 'наименование'] = '07_центр_МК_на_базе_ссМП'
    df1.at[7, 'наименование'] = '08_центр_МК_на_базе_прочей_МО'
    df1.at[8, 'наименование'] = '09_по_подчинённости'
    df1.at[9, 'наименование'] = '10_по_подчинённости_территориальный'
    df1.at[10, 'наименование'] = '11_по_подчинённости_межрайонный'
    df1.at[11, 'наименование'] = '12_по_подчинённости_межрегиональный'
    df1.at[12, 'наименование'] = '13_по_подчинённости_городской'
    df1.at[13, 'наименование'] = '14_по_подчинённости_прочий'
    return df1


# Кадры службы МК
def find_df2(df, z):
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and y.lower().lstrip().startswith('наименование должн') and \
                (str(df.loc[x, '2']).lower().startswith('число должност') or
                 str(df.loc[x, '3']).lower().startswith('число должност') or
                 str(df.loc[x, '4']).lower().startswith('число должност')) and len(a) != 1:
            a.append(x)
        if type(y) == str and y.lower().startswith('всего должност'):
            a.append(x + 1)
        if len(a) == 2:
            break
    df2 = df[a[0]:a[-1]].copy()
    df2.dropna(axis=1, how='all', inplace=True)
    df2.reset_index(inplace=True, drop=True)
    for x, y in enumerate(df2.loc[0, :]):
        if str(y).lower().startswith('число должнос') and \
                str(y).lower() != 'число должностей штатных':
            df2.iloc[0, x] = 'число должностей штатных'
        if str(y) in ['nan', 'NaN', 'Nan'] and df2.iloc[1, x].lower().startswith('занят'):
            df2.iloc[0, x] = 'число должностей занятых'
        if str(y).lower().startswith('имеют квалификационн') and \
                df2.iloc[1, x].lower().startswith('высш'):
            df2.iloc[0, x] = 'имеют квалификационную категорию из гр. 5 высшую'
        if str(y) in ['nan', 'NaN', 'Nan'] and df2.iloc[1, x].lower().startswith('перв'):
            df2.iloc[0, x] = 'имеют квалификационную категорию из гр. 5 первую'
        if str(y) in ['nan', 'NaN', 'Nan'] and df2.iloc[1, x].lower().startswith('втор'):
            df2.iloc[0, x] = 'имеют квалификационную категорию из гр. 5 вторую'
    df2.drop(index=0, inplace=True)
    df2.rename(columns={
        '1': 'наименование_должностей',
        '2': 'число_штатных_должностей',
        '3': 'число_занятых_должностей',
        '4': 'число_ФЛ_осн_работников',
        '5': 'число_ФЛ_имеют_статус_спасателя',
        '6': 'число_ФЛ_имеют_квал_категорию_высшую',
        '7': 'число_ФЛ_имеют_квал_категорию_первую',
        '8': 'число_ФЛ_имеют_квал_категорию_вторую'}, inplace=True)
    df2.drop(index=df2[df2['число_штатных_должностей'].isin(
        ['штатных', 'Штатных', 'Число должностей', 'число должностей'])].index, inplace=True)
    df2[df2.columns[0]] = df2[df2.columns[0]].str.rstrip(r'0123456789. :')
    df2[df2.columns[0]] = df2[df2.columns[0]].replace({'': np.nan})
    df2.dropna(subset=df2.columns[0], inplace=True)
    df2.reset_index(inplace=True, drop=True)
    for x, y in enumerate(df2.columns):
        if y not in ['наименование_должностей', 'наименование_субъекта']:
            df2[y] = df2[y].astype(str)
            df2[y] = df2[y].str.replace(',', '.')
            df2[y] = df2[y].astype(float)
    df2.at[0, 'наименование_должностей'] = '01_всего_врачей'
    df2.at[1, 'наименование_должностей'] = '02_врачи_спец_руководители_и_замы'
    df2.at[2, 'наименование_должностей'] = '03_акушеры_гинекологи'
    df2.at[3, 'наименование_должностей'] = '04_анестезиологи_реаниматологи'
    df2.at[4, 'наименование_должностей'] = '05_дерматовенерологи'
    df2.at[5, 'наименование_должностей'] = '06_детские_хирурги'
    df2.at[6, 'наименование_должностей'] = '07_инфекционисты'
    df2.at[7, 'наименование_должностей'] = '08_врачи_клинич_лаборатор_диагностики'
    df2.at[8, 'наименование_должностей'] = '09_неврологи'
    df2.at[9, 'наименование_должностей'] = '10_нейрохирурги'
    df2.at[10, 'наименование_должностей'] = '11_оториноларингологи'
    df2.at[11, 'наименование_должностей'] = '12_офтальмологи'
    df2.at[12, 'наименование_должностей'] = '13_педиатры'
    df2.at[13, 'наименование_должностей'] = '14_психиатры'
    df2.at[14, 'наименование_должностей'] = '15_рентгенологи'
    df2.at[15, 'наименование_должностей'] = '16_врачи_сМП'
    df2.at[16, 'наименование_должностей'] = '17_стоматологи'
    df2.at[17, 'наименование_должностей'] = '18_терапевты'
    df2.at[18, 'наименование_должностей'] = '19_токсикологи'
    df2.at[19, 'наименование_должностей'] = '20_травматологи_ортопеды'
    df2.at[20, 'наименование_должностей'] = '21_трансфузиологи'
    df2.at[21, 'наименование_должностей'] = '22_врачи_УЗИ'
    df2.at[22, 'наименование_должностей'] = '23_урологи'
    df2.at[23, 'наименование_должностей'] = '24_физиотерапевты'
    df2.at[24, 'наименование_должностей'] = '25_врачи_функциональной_диагностики'
    df2.at[25, 'наименование_должностей'] = '26_хирурги'
    df2.at[26, 'наименование_должностей'] = '27_эндоскописты'
    df2.at[27, 'наименование_должностей'] = '28_эпидемиологи'
    df2.at[28, 'наименование_должностей'] = '29_прочие'
    df2.at[29, 'наименование_должностей'] = '30_спец_с_высшим_немедицин_обр'
    df2.at[30, 'наименование_должностей'] = '31_спец_с_высшим_немедицин_обр_психологи'
    df2.at[31, 'наименование_должностей'] = '32_провизоры'
    df2.at[32, 'наименование_должностей'] = '33_средний_медперсонал'
    df2.at[33, 'наименование_должностей'] = '34_средний_медперсонал_фельдшеры'
    df2.at[34, 'наименование_должностей'] = '35_средний_медперсонал_медсёстры'
    df2.at[35, 'наименование_должностей'] = '36_средний_медперсонал_анестезисты'
    df2.at[36, 'наименование_должностей'] = '37_средний_медперсонал_операционные'
    df2.at[37, 'наименование_должностей'] = '38_фармацевты'
    df2.at[38, 'наименование_должностей'] = '39_младший_медперсонал'
    df2.at[39, 'наименование_должностей'] = '40_прочий_персонал_всего'
    df2.at[40, 'наименование_должностей'] = '41_прочий_персонал_дозиметристы'
    df2.at[41, 'наименование_должностей'] = '42_прочий_персонал_водители'
    df2.at[42, 'наименование_должностей'] = '43_всего_должностей'
    return df2


# формирования службы МК участие в Чс
def find_df3(df, year):
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and y.lower().lstrip().startswith('наименование формиров') and \
                (str(df.loc[x, '2']).lower().startswith('число формир') or
                 str(df.loc[x, '3']).lower().startswith('число формир') or
                 str(df.loc[x, '4']).lower().startswith('число формир')) and len(a) != 1:
            a.append(x)
        if type(y) == str and y.lower().startswith('прочие формиро'):
            a.append(x + 1)
        if len(a) == 2:
            break
    df3 = df[a[0]:a[-1]].copy()
    df3.dropna(axis=1, how='all', inplace=True)
    df3.reset_index(inplace=True, drop=True)
    df3.rename(columns={
        '1': 'наименование_формирований',
        '2': 'число_формирований_всего',
        '3': 'число_формирований_штатных',
        '4': 'выезды_на_ликвидацию_Чс_всеми_формированиями',
        '5': 'выезды_на_ликвидацию_Чс_штатными_формированиями'}, inplace=True)
    df3.drop(index=df3[df3['наименование_формирований'].isin(
        ['Наименование формирований', 'наименование формирований',
         'наименование_формирований'])].index, inplace=True)
    df3['наименование_формирований'] = df3['наименование_формирований'].str.rstrip(r'0123456789. :')
    df3['наименование_формирований'] = df3['наименование_формирований'].replace({'': np.nan})
    df3.dropna(subset=['наименование_формирований'], inplace=True)
    df3.reset_index(drop=True, inplace=True)
    for x, y in enumerate(df3.columns):
        if y not in ['наименование_формирований', 'наименование_субъекта']:
            df3[y] = df3[y].astype(str)
            df3[y] = df3[y].str.replace(',', '.')
            df3[y] = df3[y].str.extract(r'(\d+)')
            df3[y] = df3[y].astype(float)
    rows_names = ['01_формирования_службы_МК_всего',
                  '02_формирования_службы_МК_полевой_многопрофильный_госпиталь',
                  '03_формирования_службы_МК_медотряды',
                  '04_формирования_службы_МК_бригады_экстр_реагирования',
                  '05_формирования_службы_МК_бригады_спец_МП_всего',
                  '06_формирования_службы_МК_бригады_спец_МП_хирургические',
                  '07_формирования_службы_МК_бригады_спец_МП_детские_хирургические',
                  '08_формирования_службы_МК_бригады_спец_МП_травматологические',
                  '09_формирования_службы_МК_бригады_спец_МП_детские_травматологические',
                  '10_формирования_службы_МК_бригады_спец_МП_ожоговые',
                  '11_формирования_службы_МК_бригады_спец_МП_сосудистой_хирургии',
                  '12_формирования_службы_МК_бригады_спец_МП_нейрохирургические',
                  '13_формирования_службы_МК_бригады_спец_МП_инфекционные',
                  '14_формирования_службы_МК_бригады_спец_МП_психиатрические',
                  '15_формирования_службы_МК_бригады_спец_МП_неврологические',
                  '16_формирования_службы_МК_бригады_спец_МП_детские_психоневрологические',
                  '17_формирования_службы_МК_бригады_спец_МП_трансфузиологические',
                  '18_формирования_службы_МК_бригады_спец_МП_акушерско_гинекологические',
                  '19_формирования_службы_МК_бригады_спец_МП_радиологические',
                  '20_формирования_службы_МК_бригады_спец_МП_офтальмологические',
                  '21_формирования_службы_МК_бригады_спец_МП_челюстно_лицевой_хирургии',
                  '22_формирования_службы_МК_бригады_спец_МП_отоларингологические',
                  '23_формирования_службы_МК_бригады_спец_МП_урологические',
                  '24_формирования_службы_МК_бригады_спец_МП_лабораторно_диагностические',
                  '25_формирования_службы_МК_бригады_спец_МП_анестезиолого_реанимационные',
                  '26_формирования_службы_МК_бригады_спец_МП_терапевтические',
                  '27_формирования_службы_МК_бригады_спец_МП_педиатрические',
                  '28_формирования_службы_МК_бригады_спец_МП_судебной_медицинской_экспертизы',
                  '29_формирования_службы_МК_бригады_спец_МП_прочие',
                  '30_формирования_службы_МК_авиамедицинские_бригады',
                  '31_формирования_службы_МК_врачебно_сестринские_бригады',
                  '32_формирования_службы_МК_бригады_экстренной_доврачебной_медицинской_помощи',
                  '33_формирования_службы_МК_выездные_бригады_скорой_медицинской_помощи_всего',
                  '34_формирования_службы_МК_выездные_сМП_фельдшерские',
                  '35_формирования_службы_МК_выездные_бригады_сМП_врачебные_общепрофильные',
                  '36_формирования_службы_МК_выездные_бригады_сМП_врачебные_специализированные_всего',
                  '37_формирования_службы_МК_выездные_бригады_сМП_врачебные_специализированные_травматологические',
                  '38_формирования_службы_МК_выездные_бригады_сМП_врачебные_специализированные_кардиологические',
                  '39_формирования_службы_МК_выездные_бригады_сМП_врачебные_специализированные_неврологические',
                  '40_формирования_службы_МК_выездные_бригады_сМП_врачебные_специализированные_интенсивной_терапии',
                  '41_формирования_службы_МК_выездные_бригады_сМП_врачебные_специализированные_психиатрические',
                  '42_формирования_службы_МК_выездные_бригады_сМП_врачебные_специализированные_акушерско-гинеколог',
                  '43_формирования_службы_МК_выездные_бригады_сМП_врачебные_специализированные_хирургические',
                  '44_формирования_службы_МК_выездные_бригады_сМП_врачебные_специализированные_токсикологические',
                  '45_формирования_службы_МК_выездные_бригады_сМП_врачебные_специализированные_реанимационные',
                  '46_формирования_службы_МК_выездные_бригады_сМП_врачебные_специализированные_детские_реанимационные',
                  '47_формирования_службы_МК_выездные_бригады_сМП_врачебные_специализированные_гематологические',
                  '48_формирования_службы_МК_выездные_бригады_сМП_врачебные_специализированные_педиатрические',
                  '49_формирования_службы_МК_выездные_бригады_сМП_врачебные_специализированные_прочие',
                  '50_формирования_службы_МК_специализированные_противоэпидемические_бригады',
                  '51_формирования_службы_МК_санитарно_эпидемиологические_отряды',
                  '52_формирования_службы_МК_санитарно_эпидемиологические_бригады_всего',
                  '53_формирования_службы_МК_санитарно_эпидемиологические_бригады_радиологические_бригады',
                  '54_формирования_службы_МК_санитарно_эпидемиологические_бригады_санитарно_токсикологические_бригады',
                  '55_формирования_службы_МК_санитарно_эпидемиологические_бригады_эпидемиологические_бригады',
                  '56_формирования_службы_МК_группы_радиационной_разведки',
                  '57_формирования_службы_МК_группы_санитарно_эпидемиологической_разведки',
                  '58_формирования_службы_МК_группы_химической_токсикологической_разведки',
                  '59_формирования_службы_МК_оперативная_группа_ТЦМК',
                  '60_формирования_службы_МК_прочие_формирования']

    def remove_list_df55_3(rows_names: list):
        # удаляем для 3 формы из 2015 года строки которых нет в отчёте за этот год
        rows_names.remove('29_формирования_службы_МК_бригады_спец_МП_прочие')
        rows_names.remove('31_формирования_службы_МК_врачебно_сестринские_бригады')
        rows_names.remove('32_формирования_службы_МК_бригады_экстренной_доврачебной_медицинской_помощи')
        rows_names.remove('59_формирования_службы_МК_оперативная_группа_ТЦМК')
        return rows_names
    if year == 2015:
        rows_names = remove_list_df55_3(rows_names=rows_names)
    for x, y in enumerate(rows_names):
        df3.at[x, 'наименование_формирований'] = y
    return df3


# пострадавшие в Чс
def find_df4(df):
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and y.lower().lstrip().startswith('наименование чрезвы') and \
                (str(df.loc[x, '2']).lower().startswith('число чс') or
                 str(df.loc[x, '3']).lower().startswith('число чс') or
                 str(df.loc[x, '4']).lower().startswith('число чс')) and len(a) != 1:
            a.append(x)
        if type(y) == str and y.lower().startswith('прочие чс'):
            a.append(x + 1)
        if len(a) == 2:
            break
    df4 = df[a[0]:a[-1]].copy()
    df4.dropna(axis=1, how='all', inplace=True)
    df4.reset_index(inplace=True, drop=True)
    df4[df4.columns[0]] = df4[df4.columns[0]].str.rstrip(r'0123456789. :')
    df4[df4.columns[0]] = df4[df4.columns[0]].replace({'': np.nan})
    for x, y in enumerate(df4['1']):
        if str(y).lower().startswith('наименование чрезвычайных'):
            df4.drop(index=x, inplace=True)
        if str(y).lower().startswith(('(4000)', '\'(4000)', 'продолжение')):
            df4.drop(index=x, inplace=True)
    df4.dropna(subset=['1'], inplace=True)
    df4.reset_index(inplace=True, drop=True)
    df4.rename(columns={
        '1': 'наименование_чрезвычайных_ситуаций',
        '2': 'число_чс_абс',
        '3': 'число_пострадавших_всего',
        '4': 'число_пострадавших_детей',
        '5': 'число_поражённых_всего',
        '6': 'число_поражённых_детей',
        '7': 'число_погибших_всего',
        '8': 'число_погибших_детей',
        '9': 'количество_крайне_тяжёлых_всего',
        '10': 'количество_крайне_тяжёлых_детей',
        '11': 'количество_тяжелых_всего',
        '12': 'количество_тяжёлых_детей',
        '13': 'количество_средней_тяжести_всего',
        '14': 'количество_средней_тяжести_детей',
        '15': 'количество_лёгкой_тяжести_всего',
        '16': 'количество_лёгкой_тяжести_детей',
        '17': 'число_поражённых_которым_оказана_первая_помощь_всего',
        '18': 'Число_поражённых_которым_оказана_первая_помощь_детей'}, inplace=True)
    for x, y in enumerate(df4.columns):
        if y not in ['наименование_чрезвычайных_ситуаций', 'наименование_субъекта']:
            df4[y] = df4[y].astype(str)
            df4[y] = df4[y].str.replace(',', '.')
            df4[y] = df4[y].str.extract(r'(\d+)')
            df4[y] = df4[y].astype(float)

    row_names = [
        "01_чс_всего",
        "02_чс_техногенные",
        "03_аварии_пасс_поездов_и_метрополитена",
        "04_авиакатастрофы",
        "05_аварии_на_автодорогах",
        "06_аварии_водного_транспорта",
        "07_пожары_и_взрывы_с_горением",
        "08_аварии_с_выбросом_АХОВ",
        "09_аварии_с_выбросом_радиоактивных_веществ",
        "10_аварии_с_выбросом_опасных_биовеществ",
        "11_аварии_на_системах_жизнеобеспечения",
        "12_аварии_на_системах_жизнеобеспечения_на_коммунальных_системах_учр_здрав",
        "13_аварии_гидродинамические_прорывы_плотин_дамб",
        "14_внезапное_обрушение_зданий_сооружений_пород",
        "15_прочие_техногенные_чс",
        "16_природные_чс_всего",
        "17_опасные_геофизические_явления_извержения_вулканов_землетрясения",
        "18_опасные_геологические_явления_оползни_обвалы",
        "19_опасные_метеорологические_и гелиографические_явления",
        "20_опасные_метеорологические_и гелиографические_явления_сильный_мороз",
        "21_природные_пожары",
        "22_прочие_природные_чс",
        "23_биолого_социальные_чс_всего",
        "24_биолого_социальные_чс_инфекц_и_паразитарные_болезни_всего",
        "25_кишечные_инфекции",
        "26_кишечные_инфекции_холера",
        "27_кишечные_инфекции_брюшной_тиф",
        "28_кишечные_инфекции_паратиф_A_B_C",
        "29_кишечные_инфекции_шигеллёз",
        "30_кишечные_инфекции_другие_сальмонеллёзные_инфекции",
        "31_другие_бактериальные_инфекции",
        "32_стафилококковые_пищевые_отравления",
        "33_ботулизм",
        "34_бактериальные_зоонозы_чума_сибирская_язва",
        "35_риккетсиозы",
        "36_вирусные_инфекции_цнс_острый_полиомиелит_бешенство_клещевой_вирусный_энцефалит",
        "37_вирусные_лихорадки_и_геморрагические_лихорадки",
        "38_вирусный_гепатит_острый_A_B_C",
        "39_малярия",
        "40_болезнь_вызванная_вич",
        "41_грипп",
        "42_отравление_лекарствами_мед_и_био_веществами",
        "43_токсическое_действие_веществ",
        "44_другие_неуточнённые_эффекты_воздействия_внешних_причин",
        "45_прочие_биосоциальные_чс",
        "46_социальные_чс_всего",
        "47_терроризм",
        "48_бандитизм_действия_опг",
        "49_межэтнические_конфликты",
        "50_вооружённые_конфликты",
        "51_массовые_беспорядки",
        "52_прочие_социальные_чс",
        "53_прочие_чс"]

    for x, y in enumerate(row_names):
        df4.at[x, 'наименование_чрезвычайных_ситуаций'] = y
    return df4


# по видам оказанной помощи
def find_df5(df):
    a = []
    for x, y in enumerate(df['1']):
        b = 0
        if type(y) == str and y.lower().lstrip().startswith(r'(4010)'):
            b += 1
        if type(y) == str and y.lower().lstrip().startswith('наименование чрезвы') and \
                (str(df.loc[x, '2']).lower().startswith('число чс') or
                 str(df.loc[x, '3']).lower().startswith('число чс') or
                 str(df.loc[x, '4']).lower().startswith('число чс')) and b > 0 and len(a) > 1:
            a.append(x)
        elif type(y) == str and y.lower().startswith('прочие чс'):
            a.append(x + 1)
        if len(a) == 2:
            break
    df5 = df[a[0]:a[-1]].copy()
    df5.dropna(axis=1, how='all', inplace=True)
    df5.reset_index(inplace=True, drop=True)
    df5[df5.columns[0]] = df5[df5.columns[0]].str.rstrip(r'0123456789. :')
    df5[df5.columns[0]] = df5[df5.columns[0]].replace({'': np.nan})
    for x, y in enumerate(df5['1']):
        if str(y).lower().startswith(('наименование чрезвычайных', '(4010)', '(4000)', 'продолжение', 'число',
                                      'виды оказанной медицинской')):
            df5.drop(index=x, inplace=True)
    df5.dropna(subset=['1'], inplace=True)
    df5.reset_index(inplace=True, drop=True)
    df5.rename(columns={
        '1': 'наименование_чрезвычайных_ситуаций',
        '2': 'Количество_оказанной_первичной_медикосанитарной_помощи_всего',
        '3': 'Количество_оказанной_первичной_медикосанитарной_помощи_детям',
        '4': 'Количество_оказанной_специализированной_втчВМП_всего',
        '5': 'Количество_оказанной_специализированной_втчВМП_детям',
        '6': 'Количество_оказанной_скоройМП_всего',
        '7': 'Количество_оказанной_скоройМП_детям',
        '8': 'Число_эвакуированных_пораженных_всего',
        '9': 'Число_эвакуированных_пораженных_детей',
        '10': 'Число_госпитализированных_пораженных_всего',
        '11': 'Число_госпитализированных_пораженных_детей',
        '12': 'Число_погибших_доЭвакуации_всего',
        '13': 'Число_погибших_доЭвакуации_детей',
        '14': 'Число_погибших_воВремяЭвакуации_всего',
        '15': 'Число_погибших_воВремяЭвакуации_детей',
        '16': 'Число_погибших_в_медорганизации_всего',
        '17': 'Число_погибших_в_медорганизации_детей'}, inplace=True)
    for x, y in enumerate(df5.columns):
        if y not in ['наименование_чрезвычайных_ситуаций', 'наименование_субъекта']:
            df5[y] = df5[y].astype(str)
            df5[y] = df5[y].str.replace(',', '.')
            df5[y] = df5[y].str.extract(r'(\d+)')
            df5[y] = df5[y].astype(float)

    row_names = [
        "01_чс_всего",
        "02_чс_техногенные",
        "03_аварии_пасс_поездов_и_метрополитена",
        "04_авиакатастрофы",
        "05_аварии_на_автодорогах",
        "06_аварии_водного_транспорта",
        "07_пожары_и_взрывы_с_горением",
        "08_аварии_с_выбросом_АХОВ",
        "09_аварии_с_выбросом_радиоактивных_веществ",
        "10_аварии_с_выбросом_опасных_биовеществ",
        "11_аварии_на_системах_жизнеобеспечения",
        "12_аварии_на_системах_жизнеобеспечения_на_коммунальных_системах_учр_здрав",
        "13_аварии_гидродинамические_прорывы_плотин_дамб",
        "14_внезапное_обрушение_зданий_сооружений_пород",
        "15_прочие_техногенные_чс",
        "16_природные_чс_всего",
        "17_опасные_геофизические_явления_извержения_вулканов_землетрясения",
        "18_опасные_геологические_явления_оползни_обвалы",
        "19_опасные_метеорологические_и гелиографические_явления",
        "20_опасные_метеорологические_и гелиографические_явления_сильный_мороз",
        "21_природные_пожары",
        "22_прочие_природные_чс",
        "23_биолого_социальные_чс_всего",
        "24_биолого_социальные_чс_инфекц_и_паразитарные_болезни_всего",
        "25_кишечные_инфекции",
        "26_кишечные_инфекции_холера",
        "27_кишечные_инфекции_брюшной_тиф",
        "28_кишечные_инфекции_паратиф_A_B_C",
        "29_кишечные_инфекции_шигеллёз",
        "30_кишечные_инфекции_другие_сальмонеллёзные_инфекции",
        "31_другие_бактериальные_инфекции",
        "32_стафилококковые_пищевые_отравления",
        "33_ботулизм",
        "34_бактериальные_зоонозы_чума_сибирская_язва",
        "35_риккетсиозы",
        "36_вирусные_инфекции_цнс_острый_полиомиелит_бешенство_клещевой_вирусный_энцефалит",
        "37_вирусные_лихорадки_и_геморрагические_лихорадки",
        "38_вирусный_гепатит_острый_A_B_C",
        "39_малярия",
        "40_болезнь_вызванная_вич",
        "41_грипп",
        "42_отравление_лекарствами_мед_и_био_веществами",
        "43_токсическое_действие_веществ",
        "44_другие_неуточнённые_эффекты_воздействия_внешних_причин",
        "45_прочие_биосоциальные_чс",
        "46_социальные_чс_всего",
        "47_терроризм",
        "48_бандитизм_действия_опг",
        "49_межэтнические_конфликты",
        "50_вооружённые_конфликты",
        "51_массовые_беспорядки",
        "52_прочие_социальные_чс",
        "53_прочие_чс"]

    for x, y in enumerate(row_names):
        df5.at[x, 'наименование_чрезвычайных_ситуаций'] = y
    return df5


# ищем таблицу со сведениями о койках
def find_df6(df):
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and y.lower().lstrip().startswith('профиль коек') and \
                (str(df.loc[x, '2']).lower().startswith('число среднегодовых коек') or
                 str(df.loc[x, '3']).lower().startswith('число среднегодовых коек') or
                 str(df.loc[x, '4']).lower().startswith('число среднегодовых коек')):
            a.append(x)
        if type(y) == str and y.lower().startswith('прочие') and \
                str(df.at[x - 1, '1']).lower().startswith('реанимационные'):
            a.append(x + 1)
        if len(a) == 2:
            break
    df6 = df[a[0]:a[-1]].copy()
    df6.dropna(axis=1, how='all', inplace=True)
    df6.reset_index(inplace=True, drop=True)
    df6[df6.columns[0]] = df6[df6.columns[0]].str.rstrip(r'0123456789. :')
    df6[df6.columns[0]] = df6[df6.columns[0]].replace({'': np.nan})
    for x, y in enumerate(df6['1']):
        if str(y).lower().startswith('профиль коек'):
            df6.drop(index=x, inplace=True)
    df6.dropna(subset=['1'], inplace=True)
    df6.reset_index(inplace=True, drop=True)
    df6.rename(columns={
        '1': 'профиль_коек',
        '2': 'число_среднегодовых_коек_развернутых_вЧс',
        '3': 'поступило_поражённых_всего',
        '4': 'поступило_поражённых_детей',
        '5': 'выписано_поражённых_всего',
        '6': 'выписано_поражённых_детей',
        '7': 'умерло_всего',
        '8': 'умерло_детей',
        '9': 'проведено_поражёнными_койко_дней'}, inplace=True)

    for x, y in enumerate(df6.columns):
        if y not in ['профиль_коек', 'наименование_субъекта']:
            df6[y] = df6[y].astype(str)
            df6[y] = df6[y].str.replace(',', '.')
            df6[y] = df6[y].astype(float)

    row_names = [
        "01_всего_коек",
        "02_хирургические_койки",
        "03_торакальной_хирургии_койки",
        "04_сосудистой_хирургии_койки",
        "05_травматологические_койки",
        "06_ нейрохирургические_койки",
        "07_ожоговые_койки",
        "08_токсикологические_койки",
        "09_нефрологические_койки",
        "10_инфекционные_койки",
        "11_терапевтические_койки",
        "12_неврологические_койки",
        "13_кардиологические_койки",
        "14_гинекологические_койки",
        "15_психиатрические_койки",
        "16_реанимационные_койки",
        "17_прочие_койки"]

    for x, y in enumerate(row_names):
        df6.at[x, 'профиль_коек'] = y
    return df6


# сведения о лаборатории психофиз обеспечения ЦМК
def find_df7(df, z):
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and y.lower().lstrip().startswith('проведен профессиональный'):
            a.append(x)
        if type(y) == str and y.lower().startswith('проведено освидетель'):
            a.append(x + 5)
        if len(a) == 2:
            break
    df7 = df[a[0]:a[-1] - 5].copy()
    df7_1 = df[a[-1] - 5:a[-1]].copy()
    df7.dropna(axis=1, how='all', inplace=True)
    df7_1.dropna(axis=1, how='all', inplace=True)
    df7.reset_index(drop=True, inplace=True)
    df7_1.reset_index(drop=True, inplace=True)
    for x, y in enumerate(df7['1']):
        if str(y).lower().strip().startswith(('проведен профессиональный', 'проведено психофизио', 'всего', '(6000)',
                                              'продолжение')):
            df7.drop(index=[x], inplace=True)
    df7.dropna(inplace=True, axis=0, subset=['1'])
    df7.reset_index(inplace=True, drop=True)
    if df7.shape[0] == 0:
        df7.loc[0, :] = np.nan
    del df7['наименование_субъекта']
    for x, y in enumerate(df7_1['1']):
        if str(y).lower().strip().startswith(('проведено освидетельст', 'всего', '(6000)', '19.03.20', '15.03.20',
                                              'продолжение', 'сведения о проведени', '(7000)')):
            df7_1.drop(index=[x], inplace=True)
    df7_1.dropna(inplace=True, axis=0, subset=['1'])
    df7_1.reset_index(inplace=True, drop=True)
    if df7_1.shape[0] == 0:
        df7_1.loc[0, :] = np.nan
        df7_1.iloc[0, -1] = re.sub(r'[xls.]', '', z)
    df7 = pd.concat([df7, df7_1], ignore_index=True, axis=1)
    df7.rename(columns={
        0: 'Проведен_психофизтест_всего',
        1: 'Проведен_психофизтест_сотруд_АсФ',
        2: 'Проведен_психофизтест_сотруд_сМК',
        3: 'Проведен_психофизтест_волонтёров',
        4: 'Из_них_годных',
        5: 'Из_них_условногодных',
        6: 'Проведена_психокоррекция_всего',
        7: 'Проведена_психокоррекция_сотруд_АсФ',
        8: 'Проведена_психокоррекция_сотруд_сМК',
        9: 'Проведена_психокоррекция_волонтёров',
        10: 'Проведено_освидетел_всего',
        11: 'Проведено_освидетел_сотруд_АсФ',
        12: 'Проведено_освидетел_сотруд_сМК',
        13: 'Прошедшие_психреабилитацию_всего',
        14: 'Прошедшие_психреабилитацию_сотруд_АсФ',
        15: 'Прошедшие_психреабилитацию_сотруд_сМК',
        16: 'Прошедшие_психреабилитацию_прочие',
        17: 'Число_психпомощи_населению_в_повседдеятельности',
        18: 'Число_психпомощи_населению_в_Чс',
        19: 'Число_психпомощи_населению_ТМК_онлайн',
        20: 'наименование_субъекта'}, inplace=True)
    for x, y in enumerate(df7.columns):
        if y != 'наименование_субъекта':
            df7[y] = df7[y].astype(str)
            df7[y] = df7[y].str.replace(',', '.')
            df7[y] = df7[y].astype(float)
    return df7


# сведения об обучении
def find_df8(df, z, base_path):
    a = []
    year = re.findall('\d+', base_path.split('/')[-3])[0]
    if year == '2015':
        for x, y in enumerate(df['1']):
            if type(y) == str and y.lower().lstrip().startswith('проведено учебных цик'):
                a.append(x)
            if type(y) == str and y.lower().startswith('сведения о проведенных учениях'):
                a.append(x)
            if len(a) == 2:
                break
        df8 = df[a[0]:a[-1]].copy().reset_index(drop=True)
        df8.dropna(axis=1, how='all', inplace=True)
        df8.dropna(subset=['1'], inplace=True)
        df8 = df8.drop(index=[0]).reset_index(drop=True)
        df8.rename(columns={
            '1': 'проведено_учебных_циклов_всего',
            '2': 'обучено_всего',
            '3': 'обучено_ОргЗдрав',
            '4': 'обучено_сотрудниковCМП',
            '5': 'обучено_сотрудМЧC',
            '6': 'обучено_сотрудМВД',
            '7': 'обучено_сотрудМCП',
            '8': 'обучено_прочих'}, inplace=True)
        if df8.shape[0] == 0:
            df8.loc[0, :] = 0
            df8.iat[0, -1] = z
        for x in df8.columns:
            if x != 'наименование_субъекта':
                df8[x] = df8[x].astype(str)
                df8[x] = df8[x].str.replace(',', '.')
                df8[x] = df8[x].astype(float)
    elif year in ['2017', '2018', '2019', '2020']:
        for x, y in enumerate(df['1']):
            if type(y) == str and y.lower().lstrip().startswith('проведено учебных цик'):
                a.append(x)
            if type(y) == str and y.lower().startswith('сведения о проведенных учениях'):
                a.append(x)
            if len(a) == 2:
                break
        df8 = df[a[0]:a[-1]].copy().reset_index(drop=True)
        df8.dropna(axis=1, how='all', inplace=True)
        df8 = df8.dropna(subset=['1']).reset_index(drop=True)
        for x, y in enumerate(df8['1']):
            if str(y).lstrip().lower().startswith(('всего', 'проведено учебны')):
                df8.drop(index=[x], inplace=True)
        df8.reset_index(inplace=True, drop=True)
        df8.rename(columns={
            '1': 'проведено_учебных_циклов_всего',
            '2': 'проведено_учебных_циклов_выездных',
            '3': 'обучено_всего',
            '4': 'обучено_сотрудМЧC',
            '5': 'обучено_сотрудМВД',
            '6': 'обучено_сотрудниковCМП',
            '7': 'обучено_медработников_прочих',
            '8': 'обучено_водителей',
            '9': 'обучено_прочих',
            '10': 'число_ЗадействПрепод'}, inplace=True)

        if df8.shape[0] == 0:
            df8.loc[0, :] = 0
            df8.iat[0, -1] = z
        for x in df8.columns:
            if x != 'наименование_субъекта':
                df8[x] = df8[x].astype(str)
                df8[x] = df8[x].str.replace(',', '.')
                df8[x] = df8[x].astype(float)
    else:
        pass
    return df8


# поиск таблицы учений, занятий, тренировок
def find_df9(df):
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and \
                y.lower().lstrip().startswith('наименование чрезвычайной ситуации'):
            a.append(x)
        if type(y) == str and y.lower().startswith('всего') and len(a) > 0:
            a.append(x + 1)
        if len(a) == 2:
            break
    df9 = df[a[0]:a[-1]].copy()
    df9.dropna(axis=1, how='all', inplace=True)
    df9.dropna(axis=0, subset=['1'], inplace=True)
    df9.reset_index(drop=True, inplace=True)
    df9.drop(index=[0], inplace=True)
    df9.reset_index(drop=True, inplace=True)
    df9.rename(columns={
        '1': 'наименование_Чс',
        '2': 'число_УчТренЗанятий_всего',
        '3': 'число_УчТренЗанятий_КШУ',
        '4': 'число_УчТренЗанятий_ШТ',
        '5': 'число_УчТренЗанятий_ТсУ'}, inplace=True)
    for x, y in enumerate(df9.columns):
        if y not in ['наименование_Чс', 'наименование_субъекта']:
            df9[y] = df9[y].astype(str)
            df9[y] = df9[y].str.replace(',', '.')
            df9[y] = df9[y].str.extract(r'(\d+)')
            df9[y] = df9[y].astype(float)

    row_names = [
        "01_техногенные_чс_всего",
        "02_аварии_поездов_и_метро",
        "03_авиакатастрофы",
        "04_аварии_на_автодорогах",
        "05_аварии_водного_транспорта",
        "06_пожары_и_взрывы",
        "07_аварии_с_выбросом_АХОВ",
        "08_аварии_с_выбросом_РВ",
        "09_аварии_с_выбросом_ОБВ",
        "10_прочие_техногенные_чс",
        "11_природные_чс",
        "12_теракты",
        "13_прочие",
        "14_всего"]

    for x, y in enumerate(row_names):
        df9.at[x, 'наименование_Чс'] = y
    return df9


# поиск таблицы сведений о деятельности трассовых пунктов
def find_df10(df):
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and \
                y.lower().lstrip().startswith('показатели'):
            a.append(x)
        if type(y) == str and \
                y.lower().startswith('из них умерших во время санитарно-авиационной эвакуации всего') \
                and len(a) > 0:
            a.append(x + 2)
        if len(a) == 2:
            break
    df10 = df[a[0]:a[-1]].copy()
    df10.dropna(axis=1, how='all', inplace=True)
    df10.reset_index(drop=True, inplace=True)
    df10.drop(index=[0], inplace=True)
    df10.dropna(subset=['1'], inplace=True)
    df10.rename(columns={
        '1': 'показатели_о_деят_трасспунктов',
        '2': 'число'}, inplace=True)
    for x, y in enumerate(df10.columns):
        if y not in ['показатели_о_деят_трасспунктов', 'наименование_субъекта']:
            df10[y] = df10[y].astype(str)
            df10[y] = df10[y].str.replace(',', '.')
            df10[y] = df10[y].astype(float)
    df10.reset_index(inplace=True, drop=True)
    row_names = [
        "01_трассовые_пункты_всего",
        "02_трассовые_пункты_ТЦМК",
        "03_вызовы_всего",
        "04_пострадавшие_которым_оказана_мп",
        "05_пострадавшие_которым_оказана_мп_дети_по_17",
        "06_эвакуировано_всего",
        "07_эвакуировано_дети_по_17",
        "08_госпитализировано_всего",
        "09_госпитализировано_дети_по_17",
        "10_пострадавшие_которым_оказана_помощь_АвиаМедБригадой",
        "11_пострадавшие_которым_оказана_помощь_АвиаМедБригадой_дети_по_17",
        "12_умершие_во_время_медэвакуации_всего",
        "13_умершие_во_время_медэвакуации_дети_по_17",
        "14_умершие_во_время_саэ_всего",
        "15_умершие_во_время_саэ_дети_по_17"]

    for x, y in enumerate(row_names):
        df10.at[x, 'показатели_о_деят_трасспунктов'] = y
    return df10


# поиск таблицы сведения о материально-тех оснащении ЦМК
def find_df11(df, z):
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and \
                y.lower().lstrip().startswith('автомобильный транспорт всего'):
            a.append(x)
        if type(y) == str and \
                y.lower().startswith('аппарат узи переносной') and \
                len(a) > 0:
            a.append(x + 1)
        if len(a) == 2:
            break
    df11 = df[a[0]:a[-1]].copy()
    df11.dropna(axis=1, how='all', inplace=True)
    df11.reset_index(drop=True, inplace=True)
    if '2' not in df11.columns:
        df11['2'] = np.nan
        df11 = df11[['1', '2', 'наименование_субъекта']]
    df11.rename(columns={
        '1': 'наименование_МТО',
        '2': 'число_единиц'}, inplace=True)
    for x, y in enumerate(df11.columns):
        if y == 'число_единиц':
            df11[y] = df11[y].astype(str)
            df11[y] = df11[y].str.replace(',', '.')
            df11[y] = df11[y].astype(float)
    row_names = [
        "01_автомобильный_транспорт_всего",
        "02_авиационный_транспорт_всего",
        "03_вертолётные_площадки",
        "04_средства_связи_всего",
        "05_радиостанции",
        "06_мобильная_связь",
        "07_спутниковые_телефоны",
        "08_высокоскоростная_спутниковая_связь",
        "09_система_мобильных_телемедицинских_консультаций",
        "10_медицинское_оборудование_всего",
        "11_электрокардиограф",
        "12_эхоэнцефалоскоп",
        "13_манипуляционный_цистоскоп",
        "14_фибробронхоскоп",
        "15_аппарат_узи_переносной"]

    for x, y in enumerate(row_names):
        df11.at[x, 'наименование_МТО'] = y
    return df11


def find_df56_1(df):
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and y.lower().strip() == 'наименование':
            a.append(x)
        if type(y) == str and y.lower().startswith('выездные бригады') and len(a) > 0:
            a.append(x + 1)
        if len(a) == 2:
            break
    df56_1 = df[a[0]:a[-1]].copy()
    df56_1.dropna(axis=1, how='all', inplace=True)
    df56_1.reset_index(drop=True, inplace=True)
    df56_1.drop(index=[0], inplace=True)
    df56_1.reset_index(drop=True, inplace=True)
    df56_1.rename(columns={
        '1': 'наименование',
        '2': 'отметка'}, inplace=True)
    for x, y in enumerate(df56_1.columns):
        if y not in ['наименование', 'наименование_субъекта']:
            df56_1[y] = df56_1[y].astype(str)
            df56_1[y] = df56_1[y].str.replace(',', '.')
            df56_1[y] = df56_1[y].astype(float)
    df56_1.at[0, 'наименование'] = '01_отделений_всего'
    df56_1.at[1, 'наименование'] = '02_отделений_на_базе_центраМК'
    df56_1.at[2, 'наименование'] = '03_отделений_на_базе_центраМК_на_базе_ОКРО_больниц'
    df56_1.at[3, 'наименование'] = '04_отделений_на_базе_ОКРО_больниц'
    df56_1.at[4, 'наименование'] = '05_филиалов_отделений_всего'
    df56_1.at[5, 'наименование'] = '06_филиалов_отделений_на_базе_МУП_центраМК'
    df56_1.at[6, 'наименование'] = '07_филиалов_отделений_на_базе_ОКРО_больниц'
    df56_1.at[7, 'наименование'] = '08_филиалов_отделений_на_базе_прочихМО'
    df56_1.at[8, 'наименование'] = '09_отделений_оказывающих_МП_детям_всего'
    df56_1.at[9, 'наименование'] = '10_отделений_оказывающих_МП_детям_на_базе_центраМК'
    df56_1.at[10, 'наименование'] = '11_отделений_оказывающих_МП_детям_на_базе_ОКРО_больниц'
    df56_1.at[11, 'наименование'] = '12_отделений_оказывающих_МП_детям_на_базе_ОКРО_больниц_из_них_РКЦ'
    df56_1.at[12, 'наименование'] = '13_отделений_оказывающих_МП_детям_на_базе_ОКРО_больниц_из_них_выездные_бригады_ПЦ'
    return df56_1


def find_df56_2(df):
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and y.lower().lstrip().startswith('наименование должностей'):
            a.append(x)
        if type(y) == str and y.lower().startswith('всего должностей') and len(a) > 0:
            a.append(x + 1)
        if len(a) == 2:
            break
    df56_2 = df[a[0]:a[-1]].copy()
    df56_2.dropna(axis=1, how='all', inplace=True)
    df56_2.reset_index(drop=True, inplace=True)
    for x, y in enumerate(df56_2['1']):
        if str(y).lower().startswith('врачи - в'):
            df56_2 = df56_2[x:].copy()
            break
    df56_2.rename(columns={
        '1': 'наименование_должностей',
        '2': 'число_штатных_должностей',
        '3': 'число_занятых_должностей',
        '4': 'числоФЛ_оснРаботников',
        '5': 'имеют_статус_спасателя',
        '6': 'имеют_ВысшКвалКатегорию',
        '7': 'имеют_ПерКвалКатегорию',
        '8': 'имеют_ВторКвалКатегорию'}, inplace=True)
    for x, y in enumerate(df56_2.columns):
        if y not in ['наименование_должностей', 'наименование_субъекта']:
            df56_2[y] = df56_2[y].astype(str)
            df56_2[y] = df56_2[y].str.replace(',', '.')
            df56_2[y] = df56_2[y].astype(float)
    return df56_2


def find_df56_3_2015(df):
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and \
                y.lower().strip() == 'наименования':
            a.append(x)
        if type(y) == str and y.lower().startswith('медицинских грузов, тонны') and len(a) > 1:
            a.append('stop')
            a.append(x + 1)
        if 'stop' in a:
            break
    df56_3 = df[a[0]:a[-1]].copy()
    df56_3.dropna(axis=1, how='all', inplace=True)
    df56_3.dropna(axis=0, subset=['1'], inplace=True)
    df56_3.reset_index(drop=True, inplace=True)
    for x, y in enumerate(df56_3['1']):
        if y.lower().strip() == 'наименования' or str(y).lower().strip().startswith(('3000)', '(3000', '19.03.', '5')):
            df56_3.drop(index=[x], inplace=True)
    df56_3.reset_index(drop=True, inplace=True)
    df56_3.rename(columns={
        '1': 'наименование',
        '2': 'оказана_МП_всего',
        '3': 'оказана_МП_детям',
        '4': 'оказана_МП_ОснРаботниками',
        '5': 'оказана_МП_НаДогоспит_всего',
        '6': 'оказана_МП_НаДогоспит_детям',
        '7': 'оказана_МП_НаДогоспит_ПострадЧс_всего',
        '8': 'оказана_МП_НаДогоспит_ПострадЧс_детям',
        '9': 'оказана_МП_НаДогоспит_ПострадДТП_всего',
        '10': 'оказана_МП_НаДогоспит_ПострадДТП_детям',
        '11': 'оказана_МП_Настационар_всего',
        '12': 'оказана_МП_Настационар_детям',
        '13': 'оказана_МП_Настационар_ПострадЧс_всего',
        '14': 'оказана_МП_Настационар_ПострадЧс_детям',
        '15': 'оказана_МП_Настационар_ПострадДТП_всего',
        '16': 'оказана_МП_Настационар_ПострадДТП_детям'}, inplace=True)
    df56_3['наименование'] = df56_3['наименование'].str.strip()
    for x, y in enumerate(df56_3.columns):
        if y not in ['наименование', 'наименование_субъекта']:
            df56_3[y] = df56_3[y].astype(str)
            df56_3[y] = df56_3[y].str.replace(',', '.')
            df56_3[y] = df56_3[y].str.extract(r'(\d+)')
            df56_3[y] = df56_3[y].astype(float)
    df56_3.at[0, 'наименование'] = '01_лица_получившие_ЭКМП_всего'
    df56_3.at[1, 'наименование'] = '02_из_них_лица_получившие_санАвиаПомощь'
    df56_3.at[2, 'наименование'] = '03_число_консультаций_всего'
    df56_3.at[3, 'наименование'] = '04_из_них_заочных_консультаций_всего'
    df56_3.at[4, 'наименование'] = '05_из_них_заочных_консультаций_телефон'
    df56_3.at[5, 'наименование'] = '06_из_них_заочных_консультаций_эл_почта'
    df56_3.at[6, 'наименование'] = '07_из_них_заочных_консультаций_с_IT_технологией'
    df56_3.at[7, 'наименование'] = '08_из_них_заочных_консультаций_с_IT_технологией_телемедицина'
    df56_3.at[8, 'наименование'] = '09_из_них_заочных_консультаций_с_IT_технологией_интернет_консультации'
    df56_3.at[9, 'наименование'] = '10_из_них_очных_консультаций_всего'
    df56_3.at[10, 'наименование'] = '11_из_них_очных_консультаций_с_проведением_хирург_операций'
    df56_3.at[11, 'наименование'] = '12_из_них_очных_консультаций_с_реанимационными_мероприятиями'
    df56_3.at[12, 'наименование'] = '13_число_эвакуированных_лиц'
    df56_3.at[13, 'наименование'] = '14_из_них_эвакуированных_лиц_авиатранспортом'
    df56_3.at[14, 'наименование'] = '15_из_них_эвакуированных_лиц_сан_автотранспортом'
    df56_3.at[15, 'наименование'] = '16_из_них_эвакуированных_лиц_прочим_транспортом'
    df56_3.at[16, 'наименование'] = '17_направлено_для_МП_в_стационар'
    df56_3.at[17, 'наименование'] = '18_умерло_при_мед_эвакуации'
    df56_3.at[18, 'наименование'] = '19_число_заявок_всего'
    df56_3.at[19, 'наименование'] = '20_из_них_заявок_из_них_детям'
    df56_3.at[20, 'наименование'] = '21_выполнено_заявок_всего'
    df56_3.at[21, 'наименование'] = '22_выполнено_заявок_из_них_детям'
    df56_3.at[22, 'наименование'] = '23_из_них_выполнено_заявок_авиатранспортом'
    df56_3.at[23, 'наименование'] = '24_из_них_выполнено_заявок_авиатранспортом_из_них_детям'
    df56_3.at[24, 'наименование'] = '25_из_них_выполнено_заявок_сан_транспортом'
    df56_3.at[25, 'наименование'] = '26_из_них_выполнено_заявок_сан_транспортом_из_них_детям'
    df56_3.at[26, 'наименование'] = '27_из_них_выполнено_заявок_прочим_транспортом'
    df56_3.at[27, 'наименование'] = '28_из_них_выполнено_заявок_прочим_транспортом_из_них_детям'
    df56_3.at[28, 'наименование'] = '29_доставлено_препаратов_крови_литры'
    df56_3.at[29, 'наименование'] = '30_доставлено_мед_грузов_тонны'
    return df56_3


def find_df56_3_no1516(df, z):
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and \
                str(y).lower().strip() == 'наименования':
            a.append(x)
        if type(y) == str and str(y).lower().startswith('прочим транспортом,') and len(a) > 1:
            a.append('stop')
            a.append(x + 1)
        if 'stop' in a:
            break
    df56_3_1 = df[a[0]:a[-1]].copy()
    df56_3_1.dropna(axis=1, how='all', inplace=True)
    df56_3_1.dropna(axis=0, subset=['1'], inplace=True)
    df56_3_1.reset_index(drop=True, inplace=True)
    for x, y in enumerate(df56_3_1['1']):
        if str(y).lower().strip() == 'наименования' or str(y).lower().strip(). \
                startswith(('3000)', '(3000', '19.03.', '5', '16.03', '4', '18.03', '11.03.')):
            df56_3_1.drop(index=[x], inplace=True)
    df56_3_1.reset_index(drop=True, inplace=True)
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and \
                str(y).lower().strip() == 'наименования' and \
                (str(df.at[x - 1, '1']).lower().strip().startswith('прочим транспортом,') or
                 str(df.at[x - 2, '1']).lower().strip().startswith('прочим транспортом,') or
                 str(df.at[x - 3, '1']).lower().strip().startswith('прочим транспортом,')):
            a.append(x)
        if type(y) == str and str(y).lower().startswith('прочим транспортом,') and len(a) > 0:
            a.append(x + 1)
        if len(a) == 2:
            break
    df56_3_2 = df[a[0]:a[-1]].copy()
    df56_3_2.dropna(axis=1, how='all', inplace=True)
    df56_3_2.dropna(axis=0, subset=['1'], inplace=True)
    df56_3_2.reset_index(drop=True, inplace=True)
    for x, y in enumerate(df56_3_2['1']):
        if str(y).lower().strip() == 'наименования' or str(y).strip() == '1' or str(y).lower().strip(). \
                startswith(('3000)', '(3000', '19.03.', '5', '16.03', '4', '18.03', '11.03.')):
            df56_3_2.drop(index=[x], inplace=True)
    df56_3_2.reset_index(drop=True, inplace=True)
    df56_3 = pd.concat([df56_3_1, df56_3_2], axis=1, ignore_index=True)
    del df56_3[14], df56_3[15]
    df56_3.rename(columns={
        0: 'наименование',
        1: 'оказана_МП_всего',
        2: 'оказана_МП_детям',
        3: 'оказана_МП_детям_до_года',
        4: 'оказана_МП_ОснРаботниками',
        5: 'оказана_МП_НаДогоспит_всего',
        6: 'оказана_МП_НаДогоспит_детям',
        7: 'оказана_МП_НаДогоспит_детям_до_года',
        8: 'оказана_МП_НаДогоспит_ПострадЧс_всего',
        9: 'оказана_МП_НаДогоспит_ПострадЧс_детям',
        10: 'оказана_МП_НаДогоспит_ПострадЧс_детям_до_года',
        11: 'оказана_МП_НаДогоспит_ПострадДТП_всего',
        12: 'оказана_МП_НаДогоспит_ПострадДТП_детям',
        13: 'оказана_МП_НаДогоспит_ПострадДТП_детям_до_года',
        16: 'оказана_МП_Настационар_всего',
        17: 'оказана_МП_Настационар_детям',
        18: 'оказана_МП_Настационар_детям_до_года',
        19: 'оказана_МП_Настационар_ПострадЧс_всего',
        20: 'оказана_МП_Настационар_ПострадЧс_детям',
        21: 'оказана_МП_Настационар_ПострадЧс_детям_до_года',
        22: 'оказана_МП_Настационар_ПострадДТП_всего',
        23: 'оказана_МП_Настационар_ПострадДТП_детям',
        24: 'оказана_МП_Настационар_ПострадДТП_детям_до_года',
        25: 'наименование_субъекта'}, inplace=True)
    df56_3['наименование'] = df56_3['наименование'].str.strip()
    for x, y in enumerate(df56_3.columns):
        if y not in ['наименование', 'наименование_субъекта']:
            df56_3[y] = df56_3[y].astype(str)
            df56_3[y] = df56_3[y].str.replace(',', '.')
            df56_3[y] = df56_3[y].str.extract(r'(\d+)')
            df56_3[y] = df56_3[y].astype(float)
    df56_3['наименование_субъекта'] = re.sub(r'[xls.]', '', z)
    df56_3.at[0, 'наименование'] = '01_лица_получившие_ЭКМП_всего'
    df56_3.at[1, 'наименование'] = '02_из_них_лица_получившие_санАвиаПомощь'
    df56_3.at[2, 'наименование'] = '03_число_консультаций_всего'
    df56_3.at[3, 'наименование'] = '04_из_них_заочных_консультаций_всего'
    df56_3.at[4, 'наименование'] = '05_из_них_заочных_консультаций_телефон'
    df56_3.at[5, 'наименование'] = '06_из_них_заочных_консультаций_эл_почта'
    df56_3.at[6, 'наименование'] = '07_из_них_заочных_консультаций_с_IT_технологией'
    df56_3.at[7, 'наименование'] = '08_из_них_заочных_консультаций_с_IT_технологией_телемедицина'
    df56_3.at[8, 'наименование'] = '09_из_них_заочных_консультаций_с_IT_технологией_интернет_консультации'
    df56_3.at[9, 'наименование'] = '10_из_них_очных_консультаций_всего'
    df56_3.at[10, 'наименование'] = '11_из_них_очных_консультаций_с_проведением_хирург_операций'
    df56_3.at[11, 'наименование'] = '12_из_них_очных_консультаций_с_реанимационными_мероприятиями'
    df56_3.at[12, 'наименование'] = '13_число_эвакуированных_лиц'
    df56_3.at[13, 'наименование'] = '14_из_них_эвакуированных_лиц_авиатранспортом'
    df56_3.at[14, 'наименование'] = '15_из_них_эвакуированных_лиц_сан_автотранспортом'
    df56_3.at[15, 'наименование'] = '16_из_них_эвакуированных_лиц_прочим_транспортом'
    df56_3.at[16, 'наименование'] = '17_направлено_для_МП_в_стационар'
    df56_3.at[17, 'наименование'] = '18_умерло_при_мед_эвакуации'
    df56_3.at[18, 'наименование'] = '19_число_заявок_всего'
    df56_3.at[19, 'наименование'] = '20_выполнено_заявок_всего'
    df56_3.at[20, 'наименование'] = '21_из_них_выполнено_заявок_авиатранспортом'
    df56_3.at[21, 'наименование'] = '22_из_них_выполнено_заявок_сан_транспортом'
    df56_3.at[22, 'наименование'] = '23_из_них_выполнено_заявок_прочим_транспортом'
    return df56_3


def find_df56_3_2016(df, z):
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and \
                str(y).lower().strip() == 'наименования':
            a.append(x)
        if type(y) == str and str(y).lower().startswith('медицинских грузов,') and len(a) > 1:
            a.append('stop')
            a.append(x + 1)
        if 'stop' in a:
            break
    df56_3_1 = df[a[0]:a[-1]].copy()
    df56_3_1.dropna(axis=1, how='all', inplace=True)
    df56_3_1.dropna(axis=0, subset=['1'], inplace=True)
    df56_3_1.reset_index(drop=True, inplace=True)
    for x, y in enumerate(df56_3_1['1']):
        if str(y).lower().strip() == 'наименования' or str(y).lower().strip(). \
                startswith(('3000)', '(3000', '09.03', '5', '07.03.', '08.03')):
            df56_3_1.drop(index=[x], inplace=True)
    df56_3_1.reset_index(drop=True, inplace=True)
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and \
                str(y).lower().strip() == 'наименования' and \
                (str(df.at[x - 1, '1']).lower().strip().startswith('медицинских грузов,') or
                 str(df.at[x - 2, '1']).lower().strip().startswith('медицинских грузов,') or
                 str(df.at[x - 3, '1']).lower().strip().startswith('медицинских грузов,')):
            a.append(x)
        if type(y) == str and str(y).lower().startswith('медицинских грузов,') and len(a) > 0:
            a.append(x + 1)
        if len(a) == 2:
            break
    df56_3_2 = df[a[0]:a[-1]].copy()
    df56_3_2.dropna(axis=1, how='all', inplace=True)
    df56_3_2.dropna(axis=0, subset=['1'], inplace=True)
    df56_3_2.reset_index(drop=True, inplace=True)
    for x, y in enumerate(df56_3_2['1']):
        if str(y).lower().strip() == 'наименования' or str(y).strip() == '1' or str(y).lower().strip(). \
                startswith(('3000)', '(3000', '09.03', '5', '07.03.', '08.03')):
            df56_3_2.drop(index=[x], inplace=True)
    df56_3_2.reset_index(drop=True, inplace=True)
    df56_3 = pd.concat([df56_3_1, df56_3_2], axis=1, ignore_index=True)
    del df56_3[14], df56_3[15]
    df56_3.rename(columns={
        0: 'наименование',
        1: 'оказана_МП_всего',
        2: 'оказана_МП_детям',
        3: 'оказана_МП_детям_до_года',
        4: 'оказана_МП_ОснРаботниками',
        5: 'оказана_МП_НаДогоспит_всего',
        6: 'оказана_МП_НаДогоспит_детям',
        7: 'оказана_МП_НаДогоспит_детям_до_года',
        8: 'оказана_МП_НаДогоспит_ПострадЧс_всего',
        9: 'оказана_МП_НаДогоспит_ПострадЧс_детям',
        10: 'оказана_МП_НаДогоспит_ПострадЧс_детям_до_года',
        11: 'оказана_МП_НаДогоспит_ПострадДТП_всего',
        12: 'оказана_МП_НаДогоспит_ПострадДТП_детям',
        13: 'оказана_МП_НаДогоспит_ПострадДТП_детям_до_года',
        16: 'оказана_МП_Настационар_всего',
        17: 'оказана_МП_Настационар_детям',
        18: 'оказана_МП_Настационар_детям_до_года',
        19: 'оказана_МП_Настационар_ПострадЧс_всего',
        20: 'оказана_МП_Настационар_ПострадЧс_детям',
        21: 'оказана_МП_Настационар_ПострадЧс_детям_до_года',
        22: 'оказана_МП_Настационар_ПострадДТП_всего',
        23: 'оказана_МП_Настационар_ПострадДТП_детям',
        24: 'оказана_МП_Настационар_ПострадДТП_детям_до_года',
        25: 'наименование_субъекта'}, inplace=True)
    df56_3['наименование'] = df56_3['наименование'].str.strip()
    for x, y in enumerate(df56_3.columns):
        if y not in ['наименование', 'наименование_субъекта']:
            df56_3[y] = df56_3[y].astype(str)
            df56_3[y] = df56_3[y].str.replace(',', '.')
            df56_3[y] = df56_3[y].str.extract(r'(\d+)')
            df56_3[y] = df56_3[y].astype(float)
    df56_3['наименование_субъекта'] = re.sub(r'[xls.]', '', z)
    df56_3.at[0, 'наименование'] = '01_лица_получившие_ЭКМП_всего'
    df56_3.at[1, 'наименование'] = '02_из_них_лица_получившие_санАвиаПомощь'
    df56_3.at[2, 'наименование'] = '03_число_консультаций_всего'
    df56_3.at[3, 'наименование'] = '04_из_них_заочных_консультаций_всего'
    df56_3.at[4, 'наименование'] = '05_из_них_заочных_консультаций_телефон'
    df56_3.at[5, 'наименование'] = '06_из_них_заочных_консультаций_эл_почта'
    df56_3.at[6, 'наименование'] = '07_из_них_заочных_консультаций_с_IT_технологией'
    df56_3.at[7, 'наименование'] = '08_из_них_заочных_консультаций_с_IT_технологией_телемедицина'
    df56_3.at[8, 'наименование'] = '09_из_них_заочных_консультаций_с_IT_технологией_интернет_консультации'
    df56_3.at[9, 'наименование'] = '10_из_них_очных_консультаций_всего'
    df56_3.at[10, 'наименование'] = '11_из_них_очных_консультаций_с_проведением_хирург_операций'
    df56_3.at[11, 'наименование'] = '12_из_них_очных_консультаций_с_реанимационными_мероприятиями'
    df56_3.at[12, 'наименование'] = '13_число_эвакуированных_лиц'
    df56_3.at[13, 'наименование'] = '14_из_них_эвакуированных_лиц_авиатранспортом'
    df56_3.at[14, 'наименование'] = '15_из_них_эвакуированных_лиц_сан_автотранспортом'
    df56_3.at[15, 'наименование'] = '16_из_них_эвакуированных_лиц_прочим_транспортом'
    df56_3.at[16, 'наименование'] = '17_направлено_для_МП_в_стационар'
    df56_3.at[17, 'наименование'] = '18_умерло_при_мед_эвакуации'
    df56_3.at[18, 'наименование'] = '19_число_заявок_всего'
    df56_3.at[19, 'наименование'] = '20_выполнено_заявок_всего'
    df56_3.at[20, 'наименование'] = '21_из_них_выполнено_заявок_авиатранспортом'
    df56_3.at[21, 'наименование'] = '22_из_них_выполнено_заявок_сан_транспортом'
    df56_3.at[22, 'наименование'] = '23_из_них_выполнено_заявок_прочим_транспортом'
    df56_3.at[23, 'наименование'] = '24_доставлено_препаратов_крови_литры'
    df56_3.at[24, 'наименование'] = '25_доставлено_мед_грузов_тонны'
    return df56_3


def find_df56_4_15(df):
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and \
                y.lower().strip() == 'профили медицинской помощи':
            a.append(x)
        if type(y) == str and y.lower().startswith('прочие') and len(a) > 0:
            a.append('stop')
            a.append(x + 1)
        if 'stop' in a:
            break
    df56_4 = df[a[0]:a[-1]].copy()

    df56_4.dropna(axis=1, how='all', inplace=True)
    df56_4.dropna(axis=0, subset=['1'], inplace=True)
    df56_4.reset_index(drop=True, inplace=True)
    df56_4.drop(index=[0], inplace=True)
    df56_4.reset_index(drop=True, inplace=True)
    df56_4.rename(columns={
        '1': 'профили_МП',
        '2': 'оказана_ЭКМП_всего',
        '3': 'оказана_ЭКМП_детям',
        '4': 'оказана_ЭКМП_ПострадЧс_всего',
        '5': 'оказана_ЭКМП_ПострадЧс_детям',
        '6': 'эвакуировано_всего',
        '7': 'эвакуировано_детей',
        '8': 'эвакуировано_ПострадЧс_всего',
        '9': 'эвакуировано_ПострадЧс_детей',
        '10': 'эвакуировано_вРегМО_всего',
        '11': 'эвакуировано_вРегМО_детей',
        '12': 'эвакуировано_вРегМО_ПострадЧс_всего',
        '13': 'эвакуировано_вРегМО_ПострадЧс_детей',
        '14': 'эвакуировано_вМежРегМО_всего',
        '15': 'эвакуировано_вМежРегМО_детей',
        '16': 'эвакуировано_вМежРегМО_ПострадЧс_всего',
        '17': 'эвакуировано_вМежРегМО_ПострадЧс_детей',
        '18': 'эвакуировано_вФедМО_всего',
        '19': 'эвакуировано_вФедМО_детей',
        '20': 'эвакуировано_вФедМО_ПострадЧс_всего',
        '21': 'эвакуировано_вФедМО_ПострадЧс_детей'}, inplace=True)
    df56_4['профили_МП'] = df56_4['профили_МП'].str.strip()
    for x, y in enumerate(df56_4.columns):
        if y not in ['профили_МП', 'наименование_субъекта']:
            df56_4[y] = df56_4[y].astype(str)
            df56_4[y] = df56_4[y].str.replace(',', '.')
            df56_4[y] = df56_4[y].str.extract(r'(\d+)')
            df56_4[y] = df56_4[y].astype(float)
    df56_4.at[0, 'профили_МП'] = '01_всего'
    df56_4.at[1, 'профили_МП'] = '02_акушерство_и_геникология'
    df56_4.at[2, 'профили_МП'] = '03_анестезиология_реаниматология'
    df56_4.at[3, 'профили_МП'] = '04_детская_хирургия'
    df56_4.at[4, 'профили_МП'] = '05_инфекционные_болезни'
    df56_4.at[5, 'профили_МП'] = '06_кардиология'
    df56_4.at[6, 'профили_МП'] = '07_комбустиология'
    df56_4.at[7, 'профили_МП'] = '08_нейрохирургия'
    df56_4.at[8, 'профили_МП'] = '09_неврология'
    df56_4.at[9, 'профили_МП'] = '10_неонатология'
    df56_4.at[10, 'профили_МП'] = '11_педиатрия'
    df56_4.at[11, 'профили_МП'] = '12_пульмонология'
    df56_4.at[12, 'профили_МП'] = '13_токсикология'
    df56_4.at[13, 'профили_МП'] = '14_травматология'
    df56_4.at[14, 'профили_МП'] = '15_хирургия'
    df56_4.at[15, 'профили_МП'] = '16_прочие'
    return df56_4


def find_df56_4_16(df):
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and \
                y.lower().strip() == 'профили медицинской помощи':
            a.append(x)
        if type(y) == str and y.lower().startswith('прочие') and len(a) > 0:
            a.append('stop')
            a.append(x + 1)
        if 'stop' in a:
            break
    df56_4 = df[a[0]:a[-1]].copy()

    df56_4.dropna(axis=1, how='all', inplace=True)
    df56_4.dropna(axis=0, subset=['1'], inplace=True)
    df56_4.reset_index(drop=True, inplace=True)
    df56_4.drop(index=[0], inplace=True)
    df56_4.reset_index(drop=True, inplace=True)
    df56_4.rename(columns={
        '1': 'профили_МП',
        '2': 'оказана_ЭКМП_всего',
        '3': 'оказана_ЭКМП_детям',
        '4': 'оказана_ЭКМП_ПострадЧс_всего',
        '5': 'оказана_ЭКМП_ПострадЧс_детям',
        '6': 'эвакуировано_всего',
        '7': 'эвакуировано_детей',
        '8': 'эвакуировано_ПострадЧс_всего',
        '9': 'эвакуировано_ПострадЧс_детей',
        '10': 'эвакуировано_вРегМО_всего',
        '11': 'эвакуировано_вРегМО_детей',
        '12': 'эвакуировано_вРегМО_ПострадЧс_всего',
        '13': 'эвакуировано_вРегМО_ПострадЧс_детей',
        '14': 'эвакуировано_вМежРегМО_всего',
        '15': 'эвакуировано_вМежРегМО_детей',
        '16': 'эвакуировано_вМежРегМО_ПострадЧс_всего',
        '17': 'эвакуировано_вМежРегМО_ПострадЧс_детей',
        '18': 'эвакуировано_вФедМО_всего',
        '19': 'эвакуировано_вФедМО_детей',
        '20': 'эвакуировано_вФедМО_ПострадЧс_всего',
        '21': 'эвакуировано_вФедМО_ПострадЧс_детей'}, inplace=True)
    df56_4['профили_МП'] = df56_4['профили_МП'].str.strip()
    for x, y in enumerate(df56_4.columns):
        if y not in ['профили_МП', 'наименование_субъекта']:
            df56_4[y] = df56_4[y].astype(str)
            df56_4[y] = df56_4[y].str.replace(',', '.')
            df56_4[y] = df56_4[y].str.extract(r'(\d+)')
            df56_4[y] = df56_4[y].astype(float)
    df56_4.at[0, 'профили_МП'] = '01_всего'
    df56_4.at[1, 'профили_МП'] = '02_акушерство_и_геникология'
    df56_4.at[2, 'профили_МП'] = '03_анестезиология_реаниматология'
    df56_4.at[3, 'профили_МП'] = '04_анестезиология_реаниматология_детям_до_года'
    df56_4.at[4, 'профили_МП'] = '05_детская_хирургия'
    df56_4.at[5, 'профили_МП'] = '06_детская_хирургия_детям_до_года'
    df56_4.at[6, 'профили_МП'] = '07_инфекционные_болезни'
    df56_4.at[7, 'профили_МП'] = '08_кардиология'
    df56_4.at[8, 'профили_МП'] = '09_комбустология'
    df56_4.at[9, 'профили_МП'] = '10_нейрохирургия'
    df56_4.at[10, 'профили_МП'] = '11_неврология'
    df56_4.at[11, 'профили_МП'] = '12_неонатология'
    df56_4.at[12, 'профили_МП'] = '13_педиатрия'
    df56_4.at[13, 'профили_МП'] = '14_педиатрия_детям_до_года'
    df56_4.at[14, 'профили_МП'] = '15_пульмонология'
    df56_4.at[15, 'профили_МП'] = '16_токсикология'
    df56_4.at[16, 'профили_МП'] = '17_травматология'
    df56_4.at[17, 'профили_МП'] = '18_хирургия'
    df56_4.at[18, 'профили_МП'] = '19_прочие'
    return df56_4


def find_df56_4_no1516(df):
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and \
                y.lower().strip() == 'профили медицинской помощи':
            a.append(x)
        if type(y) == str and y.lower().startswith('прочие') and len(a) > 0:
            a.append('stop')
            a.append(x + 1)
        if 'stop' in a:
            break
    df56_4_1 = df[a[0]:a[-1]].copy()
    df56_4_1.dropna(axis=1, how='all', inplace=True)
    df56_4_1.dropna(axis=0, subset=['1'], inplace=True)
    df56_4_1.reset_index(drop=True, inplace=True)
    df56_4_1.drop(index=[0], inplace=True)
    df56_4_1.reset_index(drop=True, inplace=True)
    df56_4_1['1'] = df56_4_1['1'].str.strip()
    del df56_4_1['наименование_субъекта']
    for x, y in enumerate(df56_4_1.columns):
        if y != '1':
            df56_4_1[y] = df56_4_1[y].astype(str)
            df56_4_1[y] = df56_4_1[y].str.replace(',', '.')
            df56_4_1[y] = df56_4_1[y].str.extract(r'(\d+)')
            df56_4_1[y] = df56_4_1[y].astype(float)
    for x, y in enumerate(df56_4_1['1']):
        if str(y).lower().strip().startswith(('16.03.', '(4000', '4000)', '9', '15')):
            df56_4_1.drop(index=[x], inplace=True)
    df56_4_1.reset_index(inplace=True, drop=True)
    a = []
    for x, y in enumerate(df['1']):
        if type(y) == str and \
                y.lower().strip() == 'профили медицинской помощи':
            a.append(x)
        if type(y) == str and y.lower().startswith('прочие') and len(a) > 0:
            a.append(x + 1)
    df56_4_2 = df[a[-3]:a[-1]].copy()
    df56_4_2.dropna(axis=1, how='all', inplace=True)
    df56_4_2.dropna(axis=0, subset=['1'], inplace=True)
    df56_4_2.reset_index(drop=True, inplace=True)
    df56_4_2.drop(index=[0, 1], inplace=True)
    df56_4_2.reset_index(drop=True, inplace=True)
    for x, y in enumerate(df56_4_2['1']):
        if str(y).lower().strip().startswith(('16.03.', '(4000', '4000)', '9', '1', 'профили мед')):
            df56_4_2.drop(index=[x], inplace=True)
    df56_4_2.reset_index(inplace=True, drop=True)
    del df56_4_2['1']
    for x, y in enumerate(df56_4_2.columns):
        if y != 'наименование_субъекта':
            df56_4_2[y] = df56_4_2[y].astype(str)
            df56_4_2[y] = df56_4_2[y].str.replace(',', '.')
            df56_4_2[y] = df56_4_2[y].str.extract(r'(\d+)')
            df56_4_2[y] = df56_4_2[y].astype(float)

    df56_4 = pd.concat([df56_4_1, df56_4_2], ignore_index=True, axis=1)
    df56_4.rename(columns={
        0: 'профили_МП',
        1: 'оказана_ЭКМП_всего',
        2: 'оказана_ЭКМП_детям',
        3: 'оказана_ЭКМП_детям_до_года',
        4: 'оказана_ЭКМП_ПострадЧс_всего',
        5: 'оказана_ЭКМП_ПострадЧс_детям',
        6: 'оказана_ЭКМП_ПострадЧс_детей_до_года',
        7: 'эвакуировано_всего',
        8: 'эвакуировано_детей',
        9: 'эвакуировано_детей_до_года',
        10: 'эвакуировано_ПострадЧс_всего',
        11: 'эвакуировано_ПострадЧс_детей',
        12: 'эвакуировано_ПострадЧс_детей_до_года',
        13: 'эвакуировано_вРегМО_всего',
        14: 'эвакуировано_вРегМО_детей',
        15: 'эвакуировано_вРегМО_детей_до_года',
        16: 'эвакуировано_вРегМО_ПострадЧс_всего',
        17: 'эвакуировано_вРегМО_ПострадЧс_детей',
        18: 'эвакуировано_вРегМО_ПострадЧс_детей_до_года',
        19: 'эвакуировано_вМежРегМО_всего',
        20: 'эвакуировано_вМежРегМО_детей',
        21: 'эвакуировано_вМежРегМО_детей_до_года',
        22: 'эвакуировано_вМежРегМО_ПострадЧс_всего',
        23: 'эвакуировано_вМежРегМО_ПострадЧс_детей',
        24: 'эвакуировано_вМежРегМО_ПострадЧс_детей_до_года',
        25: 'эвакуировано_вФедМО_всего',
        26: 'эвакуировано_вФедМО_детей',
        27: 'эвакуировано_вФедМО_детей_до_года',
        28: 'эвакуировано_вФедМО_ПострадЧс_всего',
        29: 'эвакуировано_вФедМО_ПострадЧс_детей',
        30: 'эвакуировано_вФедМО_ПострадЧс_детей_до_года',
        31: 'наименование_субъекта'}, inplace=True)
    df56_4.at[0, 'профили_МП'] = '01_всего'
    df56_4.at[1, 'профили_МП'] = '02_акушерство_и_геникология'
    df56_4.at[2, 'профили_МП'] = '03_анестезиология_реаниматология'
    df56_4.at[3, 'профили_МП'] = '04_детская_хирургия'
    df56_4.at[4, 'профили_МП'] = '05_инфекционные_болезни'
    df56_4.at[5, 'профили_МП'] = '06_кардиология'
    df56_4.at[6, 'профили_МП'] = '07_комбустиология'
    df56_4.at[7, 'профили_МП'] = '08_нейрохирургия'
    df56_4.at[8, 'профили_МП'] = '09_неврология'
    df56_4.at[9, 'профили_МП'] = '10_неонатология'
    df56_4.at[10, 'профили_МП'] = '11_педиатрия'
    df56_4.at[11, 'профили_МП'] = '12_пульмонология'
    df56_4.at[12, 'профили_МП'] = '13_токсикология'
    df56_4.at[13, 'профили_МП'] = '14_травматология'
    df56_4.at[14, 'профили_МП'] = '15_хирургия'
    df56_4.at[15, 'профили_МП'] = '16_прочие'

    return df56_4
